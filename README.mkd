## Outline

Software containers have the potential to solve the common problem in
bioinformatics where complex dependencies can make installing and using a tool
difficult. Containerisation allows any developer to include all the required
dependencies along with their tool to provide the end-user with everything they
need to start using it.

Two existing projects have taken advantage of this concept to benchmark
bioinformatics software inside containers: [CAMI](http://cami-challenge.org/)
and [nucleotid.es](http://nucleotid.es). We, the developers from these two
projects, met to agree a standard so that containers created by one project
would be usable by another through the same interface.

The aim of this RFC is to create a standard for well-defined bioinformatics
applications. This standard will put the users of bioinformatics software
first, so that a community-agreed interface allows the use of different tools
regardless of where or by whom it was developed. We welcome contributions and
suggestions from other developers with aim of creating a standard that everyone
can follow and agree on.

## Development process

The SIBCI RFC process is loosely based on the [Github
Flow](https://guides.github.com/introduction/flow/index.html) and the [Rust
Language RFC process](https://github.com/rust-lang/rfcs). This process is
lightweight to encourage others to submit patches.

### Updates to existing container specs

The SIBCI RFC is development process is structured around Github branches and
pull requests. Each container specification versioning follows [semantic
versioning](http://semver.org). Each container spec has a named maintainer and
all issues and pull requests should be assigned to them for initial assessment.
Github branches should named as follows:

  * **master**: The branch corresponding to the most recent version of all
    RFCs.

  * **feature/PATH-TO-SPEC/name-of-fix**: A branch corresponding to a minor or
    major change to a spec. These should be merged into **master** upon
    acceptance. The branch should update the version number in the relevant RFC
    depending on the type of change.

    * **X.0.0**: A change containing a one or more backwards-incompatible major
      update to a container spec. This type of branch should be rare as this
      will require all existing implementations to be updated to match the new
      interface. Therefore as many breaking changes as possible should be
      combined at once. An example of this type of breaking change would be
      renaming an existing environment variable.

    * **X.Y.0**: A branch containing to one or more backwards-compatible
      changes to a container specification. An example is an additional
      environment variable provided to the container that may be optionally
      used, and does not break existing implementations. This type of branch
      should still be considered with caution as once implemented, the removal
      would result in a backwards-incompatible change.

  * **fix/PATH-TO-SPEC/name-of-fix** or **fix/name-of-fix** A branch
    corresponding to a minor fix to an RFC. An example is a typo or rewording
    of the text for clarity. These should be based-off and merged into master
    relatively quickly.
