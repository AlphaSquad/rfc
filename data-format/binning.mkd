## Binning Output Format

  * Version:    0.9.0
  * Maintainer: Peter Belmann <pbelmann@cebitec.uni-bielefeld.de>
  * Authors: CAMI-Challege organizers

###1. Outline

The binning format was originally specified for the CAMI contest and is intended to
serve as a standard format for (taxonomic) binning methods. 

It is a TAB (`\t`) delimited text format consisting of a header section and an output section.
The header MUST be prior the output. Header lines start with `@` or `#` for
comments, while output lines do not. Only the UNIX newline character `\n` MUST be used to define the end of a line and the text MUST be valid UTF-8 encoding.

Files containing this data format should be named with the filename suffix `.binning`.

Each output line has 2 mandatory fields: The **SEQUENCEID** and either **TAXID** or
**BINID**.

Regular expressions, when provided, are given as specified in IEEE Std 1003.1â„¢ ERE.

###2. Header section

The header section MAY contain comment lines, which begin with the character
`#`. Each mandatory header line begins with the character `@`. If there is just
one `@`, this is followed by a data field with the format **TAG:VALUE** where **TAG**
is a variable alphanumeric string that defines the content and the format of
**VALUE**. **VALUE** MUST NOT contain characters other than alphanumerical and `,.;_-|`.
More precisely, each non-empty and non-comment header line except for the last
header line MUST match the regular expression `^\@(_[A-Za-z]*_)?[A-Za-z]+[A-Za-z0-9]*\:[A-Za-z0-9,\.;_\|]*$`. 
Though capitalisation can be used for readability, tags are regarded as case insensitive.

The specification requires that the following header tag MUST be present:

  * **VERSION**: **VALUE** MUST specify the profiling format version in the heading
  of this specification and MUST match the regular expression `[0-9\.]`.

Additional tags and values MAY be specified but each additional tag MUST be
prefixed by a case-insensitive string with an underscore before and after the string,
e.g. `_CUSTOM_`, to avoid collisions when this specification is extended in the future.
Empty prefixes MAY be used and mean that the tag starts with `_`.

The last header line MUST begin with `@@` and defines TAB-separated column tags,
where each **TAG** MUST be a string matching the regular expression
`[A-Za-z]+[A-Za-z0-9]*` and defines the content and format of values in the
corresponding column of the output section. The following lists all defined tags:

  * **SEQUENCEID**
  * **BINID**
  * **TAXID**

Further optional columns can be appended to the right but MUST be 
prefixed by a case-insensitive string with an underscore before and after the string,
e.g. `_CUSTOM_`, to avoid collisions when this specification is extended in the future.
Empty prefixes MAY be used and mean that the tag starts with `__`. This means that each
custom field MUST match the regular expression `_[A-Za-z]*_[A-Za-z]+[A-Za-z0-9]*`

For instance: 

    @@SEQUENCEID	TAXID

or

    @@SEQUENCEID	BINID
or

    @@SEQUENCEID	TAXID	BINID

or

    @@SEQUENCEID	TAXID	BINID	_SCORE_	_MYCOLUMN2_	_MYCOLUMN3_

###3. Output section

An output line MUST consist of TAB-separated fields and MUST correspond to
the last header line definition. Each field MUST match the regular expression
`[A-Za-z0-9,\.;,\(\)_\-\ ]*`. This specification defines the following field types:

  * **SEQUENCEID** specifies the ID of either a read or a contig sequence (depending on
    the sample).

  * The **TAXID** is a taxonomic assignment for binned sequences and will be used for
    evaluation of your predictions with taxonomy-based measures.

  * The **BINID** entries can be arbitrary alphanumeric identifiers for the bins.
    No taxonomy-based evaluation will be performed using the entries in this
    column.

There are three different scenarios for binning tools.

The first case, example A below: If you create taxonomic bins as output without
further resolution, you do not need to include the BINID colummn, but only the
TAXID column, in your output.

The second case, example B below: If you create bins that do not include
taxonomic assignments you do not need to include the TAXID column, but only the
BINID column, in your output.

The third case, example C below, is if you perform taxonomic binning and
additionally resolve bins below existing taxonomic IDs, e.g. to define bins
representing novel strains. In this case, you add both the TAXID. It will be
easiest to check for consistency for us, if you in this case use for the BINID
the TAXID entry and a numeric identifier appended (e.g. 562.2).

Further columns with additional information can be appended to the right.

### 4 EXAMPLES

A
```
#Format for Binning
@Version:0.9.0
@@SEQUENCEID	TAXID
read1201	123
read1202	123
read1203	131564
read1204	562
read1205	562
```
B
```
#Format for Binning
@Version:0.9.0
@@SEQUENCEID		BINID
read1201	12346BIN
read1202	ANOTHERBIN
read1203	BIN6
read1204	BIN5
read1205	BIN5
```
C
```
#Format for Binning
@Version:0.9.0
@@SEQUENCEID	TAXID	BINID
read1201	123	123
read1202	123	123
read1203	131564	131564
read1204	562	562.1
read1205	562	562.2
```
