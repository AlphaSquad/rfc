# Introduction

## Purpose

The purpose of this document is provide a detailed specification for developers
to write standardised bioinformatics containers. The audience of this document
are bioinformaticians and developers writing bioinformatics software be shared
interchangeably using Linux containers. This document will describe the
interfaces that MUST be provided to a running container and that a developer
may write their software against.

## Scope of Project

The scope of this document is bioinformatics software packaged using Linux
containers. Bioinformatics software in a Linux container can be shared and
provided to third parties as software dependencies are included within the
container. Examples of bioinformatics software are genome assemblers, read
binners and read aligners. Examples of container software are Docker, Rocket
and LXC/LXD. Standardising bioinformatics software in containers allows
interchange use between different research groups and institutions.

Applications of this standardisation are:

  * A developer uploads his short read aligner as a container to an online
    repository for others to use. A biologists downloads this aligner and is
    able to use it immediately as it follows a standardised interface that the
    biologist is already familiar with.
  * A genome assembly benchmarking service downloads many genome assembler
    containers. These containers are evaluated using assembly performance
    metrics. The standardised interface allows all containers to be benchmarked
    in the same way.
  * A large sequencing centre invests time to develop an improved genome
    assembly pipeline for single cell data. The pipeline is packaged inside a
    Linux container and shared with the bioinformatics community. Other
    sequencing centres are able to immediately compare this new pipeline with
    their in-house workflow using the same container interface.

## References

IEEE. IEEE Std 830-1998 IEEE Recommended Practice for Software Requirements
Specifications. IEEE Computer Society, 1998.

# Specific Requirements

## Functional Requirements

### Generic bioinformatics container

#### Introduction

This specification describes the required inputs for all containerised
bioinformatics software, independent of the application type.

#### Inputs

* **TASK**: The argument given to start a container MUST be a single string
  containing only the characters A-Z, a-z, 0-9, '_' and '-'. This argument is
  used to differentiate different combination of settings the containerised
  software can be run as. Every container SHOULD support a 'default' task. This
  runs the container in a mode that is applicable to the most common situation
  in which the software is used.

#### Outputs

The directory **$OUTPUT_DIR** MUST be a container mounted volume so that
created files are available on the host file system after the container exits.
The containerised software MUST return a zero exit code when completing
successfully, and return a non-zero exit code when an error occurs.

### Short-read genome assembler container

#### Introduction

This specification describes the interface for containerised short-read genome
assemblers. A genome assembler converts a FASTQ file of DNA short reads into
larger contiguous ('contigs') regions of DNA. In addition to the specifications
described below, this container MUST implement all specifications defined in
'Generic bioinformatics container'.

#### Inputs

* **FASTQ_FILE**: This variable MUST be present in the container environment.
  This variable specifies the location, relative to **INPUT_DIR**, of a gzipped
  FASTQ file. This file contains the FASTQ reads for assembly into contigs.

* **PAIRED_READS**: This variable MUST be present in the container environment.
  This variable MUST have the value 'true' to specify the **FASTQ_FILE**
  contains interleaved short reads. Interleaved is defined as the N and N+1
  FASTQ entries originating from opposite ends of the same DNA fragment. The
  value 'false' MUST be specified when the short-reads are unpaired. All other
  values for this variable are not allowed.

* **CONTIGS_FILE**: This variable MUST be present in the container environment.
  This specifies the location, relative to the **OUTPUT_DIR**, of where the
  file containing the generated contig sequences MUST be created. The created
  contigs file MUST be in FASTA format.

#### Outputs

The container MUST generate a FASTA file of contigs in the location
**$OUTPUT_DIR**/**$CONTIGS_FILE**.

### Reference-based genome assembly benchmarking container


#### Introduction

This specification describes the interface for containerised software to
evaluate a genome assembly in FASTQ format using a reference genome sequence in
FASTQ format. Genome assemblers vary in efficacy and the quality of an assembly
may be evaluated by comparing it to a higher quality reference of the same
genome. In addition to the specifications described below, this container MUST
implement all specifications defined in 'Generic bioinformatics container'.

#### Inputs

* **CONTIGS_FILE**: This variable MUST be present in the container environment.
  This specifies the location, relative to the **INPUT_DIR**, of where the file
  containing the genome assembly contigs can be found. The contigs file MUST be
  in FASTA format.

* **REFERENCE_FILE**: This variable MUST be present in the container
  environment. This variable MUST specify the location, relative to
  **INPUT_DIR**, of the file containing a FASTA formatted reference sequence
  from the same origin as the **CONTIGS_FILE** contigs.

* **OUTPUT_FILE**: This variable MUST be present in the container environment.
  This variable specifies the location, relative to **OUTPUT_DIR**, of where
  the file MUST be created containing the metrics describing the reference
  genome assembly.

#### Outputs

The container MUST generate a file of metrics from evaluating the quality of
the assembly in the file **$INPUT_DIR**/**$CONTIGS_FILE** using the reference
sequence in the file **$INPUT_DIR**/**$REFERENCE_FILE**.
